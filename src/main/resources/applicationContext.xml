<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
    <!--Spring的配置文件，主要配置和业务逻辑有关的-->
    <!--坑：导入命名空间之后，还要注意导入schemaLocation-->
    <!--扫描业务组件-->
    <context:component-scan base-package="com.nju">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"></context:exclude-filter>
    </context:component-scan>

    <!--使Spring能从外部文件读取配置-->
    <context:property-placeholder location="classpath:dbconfig.properties"></context:property-placeholder>
    <!--=======================数据源，事务控制===================-->
    <bean id="pooledDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
        <property name="driverClass" value="${jdbc.driverClass}"></property>
        <property name="user" value="${jdbc.user}"></property>
        <property name="password" value="${jdbc.password}"></property>
    </bean>

    <!--========================整合Mybatis======================-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--指定全局配置文件的位置-->
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
        <property name="dataSource" ref="pooledDataSource"></property>
        <!--指定mapper文件的位置-->
        <property name="mapperLocations" value="classpath:mapper/*.xml"></property>
    </bean>
    <!--配置扫描器：将mapper接口的实现加入ioc容器中-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--扫描所有dao接口的实现，加入到ioc容器中-->
        <property name="basePackage" value="com.nju.crud"></property>
    </bean>

    <!--配置一个可以批量执行的sqlSession-->
    <bean class="org.mybatis.spring.SqlSessionTemplate" id="sqlSession">
        <!--这个类的构造器需要传入sqlsessionfactoty和executorType-->
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
        <constructor-arg name="executorType" value="BATCH"></constructor-arg>
    </bean>
    <!--=======================事务控制==========================-->
    <bean  id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--控制住数据源 管理开启 提交 回滚操作-->
        <property name="dataSource" ref="pooledDataSource"></property>
    </bean>

    <!--比较重要的使用xml配置式的事务-->
    <!---->
    <aop:config>
        <!--切入点表达式 哪些要切入
        两个.表示service下如果有子包也算如 *(..)表示所有方法任意多参数-->
        <aop:pointcut id="txPoint" expression="execution(* com.nju.crud.service..*(..))"/>
        <!--配置事务增强也就是通知-->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"></aop:advisor>
    </aop:config>
    <!--配置事务增强 也就是事务如何切入-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!--所有方法都是事务方法-->
            <tx:method name="*"/>
            <!--所有get方法都是只读-->
            <tx:method name="get*" read-only="true"/>
        </tx:attributes>
    </tx:advice>

    <!--Spring配置文件的核心点：
    1，从外部配置文件读取数据源信息，配置数据源
    2，整合Mybatis，配置sqlSessionFactoryBean，配置Mapper扫描器
    3. 配置事务，配置事务管理器和事务如何切入-->
</beans>